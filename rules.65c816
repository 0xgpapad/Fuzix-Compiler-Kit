# fetch/store rules when we need X
# Need rules for each form except ,x as we can't ldx ,x
	lda #%1
	tax
	lda %2,x
=
	ldx #%1
	lda %2,x

	lda _%1
	tax
	lda %2,x
=
	ldx _%1
	lda %2,x

	lda T%1
	tax
	sta %2,x
=
	ldx T%1
	sta %2,x

	lda %1,y
	tax
	lda %2,x
=
	ldx %1,y
	lda %2,x

# Optimize 32:16 compare
	stz @hireg
	lda %1
;invalregs
	jsr __cc%2
=
	lda %1
	jsr __cc%2z

# Maths we didn't manage to clean up at tree level
	pha
	lda %1
	sta @tmp
	pla
	clc
	adc @tmp
=
	clc
	adc %1

# the rep clears the other half of A for free
	rep #0x20
	and #0xff
=
	rep #0x20

# Remove double and masking cases (eg >> 8 and cast is the usual)
	and #0xff
	and #0xff
=
	and #0xff

# Flip simple x operations around. Should do this in the compiler for
# such cases (eg << >> )
	lda %1,y
	pha
	lda %2
	plx
;invalregs
	jsr %3
=
	ldx %1,y
	lda %2
	jsr %3

	lda #%1
	pha
	lda %2
	plx
;invalregs
	jsr %3
=
	ldx #%1
	lda %2
	jsr %3

	lda _%1
	pha
	lda %2
	plx
;invalregs
	jsr %3
=
	ldx T%1
	lda %2
	jsr %3

	lda #%1
	pha
	lda %2
	plx
;invalregs
	jsr %3
=
	ldx T%1
	lda %2
	jsr %3
