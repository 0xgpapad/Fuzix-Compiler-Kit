- clean up dead header types and passing multiple tags when 1 needed
  (eg do/while ?)
- (int *) casting syntax
- finish operator type checking
- typedef  (partly done - we sort of create them but we don't recognize them)
- enum - do we care ?
- for word stacking machines add target hooks to specify that arguments
  take 2 bytes even if char, and alloc space correctly both in the func
  declaration/argument side and in the arg stacking (arg passing side done)
- rewrite x = x + .. and x = x -... etc as += -=
- char a[8] = { "foo" } needs to be handled - right now we'll try and stuff
  the pointer into it which is wrong
- Turn the frame the other way up ?

Broken 
-	constify needs a hard stare or two
-	scoping fixes for the iterator
-	see if we can just treat typedef base behaviour as a storage
	class so that we can embed the code into the iterator and remove
	the callout stuff
-	default: for the switch tables

Longer term
- helper formats C style versus postfix, who cleans up need to be controlled
  by target by type
- backend hooks for building stack frame via initializers
- float
- allow char v uchar default to be set by target
- literal based handling for some types (set by target) - eg double/longlong
  so that we pass pointers around including one to a memory "register". 
  &x will need care as do casts
- do we want to go to some kind of table rule parsing model over the
  current code based one ?
- look at some kind of simple register assignment rewriting so that 6803/6809
  etc can try and rewrite some subtrees to use an index register, and maybe
  also eliminate the push case for some of those
- how to deal with Z80 sanely
- simple register tracking helper library
- rewrite && and || and maybe ?: so that we don't have
  (AND (BOOL (x)) (BOOL(y))) but some kind of
  BOOL(AND(CC(x) CC(y))) and work on condition code plus a tidy if needed so
  that we can have ccode setting trees that drop the top bool if the CC is
  ok.
