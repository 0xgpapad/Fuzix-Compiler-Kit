# Branches
	jp %1
%1:
=
%1:

	jp %2
%1:
%2:
=
%1:
%2:

	jp %1
	jp %2
=
	jp %1

# Trivial
	ex de,hl
	ex de,hl
=

	ex de,hl
;
	ex de,hl
=

	push hl
	pop hl
=

	push hl
;
	pop hl
=

	inc hl
	dec hl
=

	dec hl
	inc hl
=

# Trivial perverse assignment and usage pattern
# Really we need reg tracking for ix iy hl and maybe bc de
	push hl
	pop i%1
;
	push i%1
	pop hl
=
	push hl
	pop i%1

# HL reloads. TODO track HL in the core code so we can eliminate them
# properly and for more than constants
	ld hl,0x%1
	ld (%2),hl
;
	ld hl,0x%1
=
	ld hl,0x%1
	ld (%2),hl

        ld hl,0x%1
        ld (%2),hl
;
        ld hl,0x%1
=
	ld hl,0x%1
	ld (%2),hl

	ex de,hl
	pop de
	ex de,hl
=
	pop hl

# Clean up trivial multiple loads - often from assignments
	ld hl,0x%1
	ld (%2),hl
	ld hl,0x%1
=
	ld hl,0x%1
	ld (%2),hl

	ld hl,0x%1
	ld (%2),hl
;
	ld hl,0x%1
=
	ld hl,0x%1
	ld (%2),hl

	ld hl,0x%1
	ld (%2),hl
	ld (%3),hl
;
	ld hl,0x%1
=
	ld hl,0x%1
	ld (%2),hl
	ld (%3),hl

# Trivial byte cleanup
	ld a,0x0
	ld (hl),a
	ld l,a
=
	xor a
	ld (hl),a
	ld l,a

# Simple stack optimize for pushes of same
	ld hl,0x%1
	push hl
	ld hl,0x%1
=
	ld hl,0x%1
	push hl

	ld hl,0x%1
	push hl
;
	ld hl,0x%1
=
	ld hl,0x%1
	push hl
;

# Function entry frame setup
# we may rework this if we build args as we go, but in the mean time
	push hl
	ld hl,%1
	pop af
	push hl
=
	ld hl,%1
	push hl

# This happens a lot. Fix it up here until we add a layer of byte op
# spotting to the compiler backends.
	ld h,0x0
	ld e,%1
	call __bandde0d
=
	ld h,0x0
	ld a,%1
	and l
	ld l,a

	ld h,0x0
	ld e,%1
	call __orde0d
=
	ld h,0x0
	ld a,%1
	or l
	ld l,a

	ld h,0x0
	ld e,%1
	call __xorde0d
=
	ld h,0x0
	ld a,%1
	xor l
	ld l,a

# Byte load and then store to local without data then being needed
# TODO: might be able to fix this up in the backend pass as tree match
	ld l,0x%1
	ld a,l
	ld hl,%2
	add hl,sp
	ld (hl),a
=
	ld hl,%2
	add hl,sp
	ld (hl),0x%1

# Use ex (sp),hl for some setups. Needs a big match as we use pop af to get the
# byte 1 offset byte sized argument now and then
	ld hl,%1
	pop af
	push hl
;
	ld hl,%2
=
	ld hl,%1
	ex (sp),hl
;
	ld hl,%2
